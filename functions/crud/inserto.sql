-- PROCEDURE GENÉRICA PARA INSERIR DADOS EM QUALQUER TABELA
CREATE OR REPLACE PROCEDURE INSERIR_DADOS(
    TABELA TEXT,
    COLUNAS TEXT,
    VALORES TEXT
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    SQL_COMANDO TEXT;
BEGIN
    -- %s permite que o nome da tabela seja tratado como string pura (sem aspas duplas)
    SQL_COMANDO := FORMAT('INSERT INTO %s (%s) VALUES (%s)', TABELA, COLUNAS, VALORES);
    EXECUTE SQL_COMANDO;
END;
$$;

-- FUNÇÃO PARA INSERIR UM CLIENTE
CREATE OR REPLACE FUNCTION ADICIONAR_CLIENTE(
    NOME TEXT,
    EMAIL TEXT,
    TELEFONE TEXT
)
RETURNS VOID
LANGUAGE PLPGSQL
AS $$
DECLARE
    COLUNAS TEXT := 'NOME, EMAIL, TELEFONE, ATIVO';
    VALORES TEXT;
BEGIN
    VALORES := QUOTE_LITERAL(NOME) || ', ' ||
               QUOTE_LITERAL(EMAIL) || ', ' ||
               QUOTE_LITERAL(TELEFONE) || ', ' ||
               QUOTE_LITERAL(TRUE);
    CALL INSERIR_DADOS('CLIENTE', COLUNAS, VALORES);
END;
$$;
-- SELECT ADD_CLIENTE('JOÃO', 'JOAO@EMAIL.COM', '11999999999');

-- FUNÇÃO PARA INSERIR UM ENDEREÇO
CREATE OR REPLACE FUNCTION ADICIONAR_ENDERECO(
    COMPLEMENTO TEXT,
    NUMERO TEXT,
    BAIRRO TEXT,
    RUA TEXT,
    CEP TEXT
)
RETURNS VOID
LANGUAGE PLPGSQL
AS $$
DECLARE
    COLUNAS TEXT := 'COMPLEMENTO, NUMERO, BAIRRO, RUA, CEP, DELETADO';
    VALORES TEXT;
BEGIN
    VALORES := QUOTE_LITERAL(COMPLEMENTO) || ', ' ||
               QUOTE_LITERAL(NUMERO) || ', ' ||
               QUOTE_LITERAL(BAIRRO) || ', ' ||
               QUOTE_LITERAL(RUA) || ', ' ||
               QUOTE_LITERAL(CEP) || ', ' ||
               QUOTE_LITERAL(FALSE);
    CALL INSERIR_DADOS('ENDERECO', COLUNAS, VALORES);
END;
$$;
-- SELECT ADD_ENDERECO('QUADRA 05', '13', 'JOQUEI', 'RUA DAS FLORES', '64010180');

-- FUNÇÃO PARA INSERIR UM ATENDENTE
CREATE OR REPLACE FUNCTION ADICIONAR_ATENDENTE(
    NOME TEXT,
    CPF TEXT,
    EMAIL TEXT
)
RETURNS VOID
LANGUAGE PLPGSQL
AS $$
DECLARE
    COLUNAS TEXT := 'NOME, CPF, EMAIL, ATIVO';
    VALORES TEXT;
BEGIN
    VALORES := QUOTE_LITERAL(NOME) || ', ' ||
               QUOTE_LITERAL(CPF) || ', ' ||
               QUOTE_LITERAL(EMAIL) || ', ' ||
               QUOTE_LITERAL(TRUE);
    CALL INSERIR_DADOS('ATENDENTE', COLUNAS, VALORES);
END;
$$;
-- SELECT ADD_ATENDENTE('ROBERTO', '08790882319', 'ROBERTO@EMAIL.COM');

-- FUNÇÃO PARA INSERIR UM ENTREGADOR
CREATE OR REPLACE FUNCTION ADICIONAR_ENTREGADOR(
    NOME TEXT,
    CPF TEXT,
    TELEFONE TEXT
)
RETURNS VOID
LANGUAGE PLPGSQL
AS $$
DECLARE
    COLUNAS TEXT := 'NOME, CPF, TELEFONE, ATIVO';
    VALORES TEXT;
BEGIN
    VALORES := QUOTE_LITERAL(NOME) || ', ' ||
               QUOTE_LITERAL(CPF) || ', ' ||
               QUOTE_LITERAL(TELEFONE) || ', ' ||
               QUOTE_LITERAL(TRUE);
    CALL INSERIR_DADOS('ENTREGADOR', COLUNAS, VALORES);
END;
$$;
-- SELECT ADD_ENTREGADOR('ENZO', '12345678999', '12345678');

-- FUNÇÃO PARA INSERIR UM FORNECEDOR
CREATE OR REPLACE FUNCTION ADICIONAR_FORNECEDOR(
    NOME TEXT,
    EMAIL TEXT,
    TELEFONE TEXT
)
RETURNS VOID
LANGUAGE PLPGSQL
AS $$
DECLARE
    COLUNAS TEXT := 'NOME, EMAIL, TELEFONE, ATIVO';
    VALORES TEXT;
BEGIN
    VALORES := QUOTE_LITERAL(NOME) || ', ' ||
               QUOTE_LITERAL(EMAIL) || ', ' ||
               QUOTE_LITERAL(TELEFONE) || ', ' ||
               QUOTE_LITERAL(TRUE);
    CALL INSERIR_DADOS('FORNECEDOR', COLUNAS, VALORES);
END;
$$;
-- SELECT ADD_FORNECEDOR('FORNECEDOR 1', 'forn@gmail.com', '12345678');

-- FUNÇÃO PARA INSERIR UM PRODUTO NA TABELA PRODUTO
CREATE OR REPLACE FUNCTION ADICIONAR_PRODUTO(
    NOME TEXT,
    DESCRICAO TEXT,
    VALOR_UNITARIO NUMERIC
)
RETURNS VOID
LANGUAGE PLPGSQL
AS $$
DECLARE
    COLUNAS TEXT := 'NOME, DESCRICAO, VALOR_UNITARIO, DELETADO';
    VALORES TEXT;
BEGIN
    VALORES := QUOTE_LITERAL(NOME) || ', ' ||
               QUOTE_LITERAL(DESCRICAO) || ', ' ||
               QUOTE_LITERAL(VALOR_UNITARIO) || ', ' ||
               QUOTE_LITERAL(FALSE);
    CALL INSERIR_DADOS('PRODUTO', COLUNAS, VALORES);
END;
$$;
-- SELECT ADD_PRODUTO('CAIXA DE MORANGOS', 'CAIXA', 13.5);

-- FUNÇÃO PARA INSERIR UM INGREDIENTE NA TABELA INGREDIENTE
CREATE OR REPLACE FUNCTION ADICIONAR_INGREDIENTE(
    NOME TEXT,
    UNIDADE_MEDIDA TEXT,
    QTD_ESTOQUE NUMERIC
)
RETURNS VOID
LANGUAGE PLPGSQL
AS $$
DECLARE
    COLUNAS TEXT := 'NOME, UNIDADE_MEDIDA, QTD_ESTOQUE, DELETADO';
    VALORES TEXT;
BEGIN
    VALORES := QUOTE_LITERAL(NOME) || ', ' ||
               QUOTE_LITERAL(UNIDADE_MEDIDA) || ', ' ||
               QUOTE_LITERAL(QTD_ESTOQUE) || ', ' ||
               QUOTE_LITERAL(FALSE);
    CALL INSERIR_DADOS('INGREDIENTE', COLUNAS, VALORES);
END;
$$;
-- SELECT ADD_INGREDIENTE('FARINHA DE TRIGO', 'KG', 1.0);

-- FUNÇÃO PARA INSERIR UM NOVO TIPO DE PAGAMENTO
CREATE OR REPLACE FUNCTION ADICIONAR_TIPO_PAGAMENTO(
    NOME TEXT
)
RETURNS VOID
LANGUAGE PLPGSQL
AS $$
DECLARE
    COLUNAS TEXT := 'NOME, DELETADO';
    VALORES TEXT;
BEGIN
    VALORES := QUOTE_LITERAL(NOME) || ', ' ||
               QUOTE_LITERAL(FALSE);

    CALL INSERIR_DADOS('TIPO_PAGAMENTO', COLUNAS, VALORES);
END;
$$;
-- SELECT ADD_TIPO_PAGAMENTO('Dinheiro');
-- SELECT ADD_TIPO_PAGAMENTO('Cartão de Crédito');
-- SELECT ADD_TIPO_PAGAMENTO('Cartão de Débito');
-- SELECT ADD_TIPO_PAGAMENTO('Pix');
-- SELECT ADD_TIPO_PAGAMENTO('Vale-Refeição');
-- SELECT ADD_TIPO_PAGAMENTO('Vale-Alimentação');